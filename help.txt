Transcrypt -m -dm -e 7 -jk -jm -k -n  PyEmbroidery.py

'source', nargs='?', help = ".py file containing source code of main module"
'-a', '--anno', help = "annotate target files that were compiled from Python with source file names and source line numbers", action = 'store_true')
'-am', '--alimod', help = "use aliasing for module paths", action = 'store_true')
'-b', '--build', help = "rebuild all target files from scratch", action = 'store_true')
'-c', '--complex', help = "enable complex number support, locally requires operator overloading", action = 'store_true')
'-d', '--docat', help = "enable __doc__ attributes. Apply sparsely, since it will make docstrings part of the generated code", action = 'store_true')
'-da', '--dassert', help = "debug: activate assertions", action = 'store_true')
'-dc', '--dcheck', help = "debug: perform lightweight consistency check", action = 'store_true')
'-de', '--dextex', help = "debug: show extended exception reports", action = 'store_true')
'-dl', '--dlog', help = "debug: log compiler messages to disk", action = 'store_true')
'-dm', '--dmap', help = "debug: dump human readable source map", action = 'store_true')
'-dn', '--dnostrip', help = "debug: no comment stripping of __core__ and __builtin__ in-line modules", action = 'store_true')
'-ds', '--dstat', help = "debug: validate static typing using annotations", action = 'store_true')
'-dt', '--dtree', help = "debug: dump syntax tree", action = 'store_true')
'-e', '--esv', nargs='?', help = "ecma script version of generated code, default = 6. The symbol __esv<versionnr>__ is added to the global symbol list, e.g. __esv7__.")
'-ec', '--ecom', help = "enable executable comments, seen as comments by CPython but as executable statements by Transcrypt", action = 'store_true')
'-f', '--fcall', help = "enable fastcall mechanism by default. You can also use __pragma__ ('fcal') and __pragma__ (\'nofcall\')", action = 'store_true')
'-g', '--gen', help = "enable generators and iterators. Disadvised, since it will result in a function call for each loop iteration. Preferably use __pragma__ ('gen') and __pragma__ ('nogen')", action = 'store_true')
'-i', '--iconv', help = "enable automatic conversion to iterable by default. Disadvised, since it will result in a type check for each for-loop. Preferably use __pragma__ ('iconv') and __pragma__ (\'noiconv\') to enable automatic conversion locally", action = 'store_true')
'-jc', '--jscall', help = "enable native JavaScript calls for Python methods. This is fast, but doesn't support bound method assignment, decorators and non-instance methods. Preferably use __pragma__ ('jscall') and __pragma__ ('nojscall') to enable native JavaScript calls locally", action = 'store_true')
'-jk', '--jskeys', help = "interpret {key: 'value'} as {'key': 'value'} and forbid {key (): 'value'}, as JavaScript does. Disadvised, since it's less flexible than the Python interpretation. Either follow Python semantics by using {'key': 'value'} explicitly if you want literal keys or use __pragma__ ('jskeys') and __pragma__ ('nojskeys') locally instead to make clear local deviation from Python semantics", action = 'store_true')
'-jm', '--jsmod', help = "give %% and %%= JavaScript rather than Python behaviour. Disadvised, since it deviates from the mathematical 'modulo' operator. Either follow Python semantics or use __pragma__ ('jsmod') and __pragma__ ('nojsmod') locally instead to make clear local deviation.", action = 'store_true')
'-k', '--kwargs', help = "enable keyword arguments by default. In general this is disadvised, use __pragma__ ('kwargs') and __pragma__('nokwargs') locally instead to prevent bloated code", action = 'store_true')
'-kc', '--keycheck', help = "enable checking for existence of dictionary keys. In general this is disadvised, use __pragma__ ('keycheck') and __pragma__('nokeycheck') locally instead to prevent bloated code", action = 'store_true')
'-l', '--license', help = "show license", action = 'store_true')
'-m', '--map', help = "generate source map", action = 'store_true')
'-n', '--nomin', help = "no minification", action = 'store_true')
'-o', '--opov', help = "enable operator overloading by default. In general this is disadvised, use __pragma__ ('opov') and __pragma__('noopov') locally instead to prevent slow code", action = 'store_true')
'-p', '--parent', nargs='?', help = "object that will hold application, default is window. Use -p .none to generate orphan application, e.g. for use in node.js")
'-r', '--run', help = "run source file rather than compiling it", action = 'store_true')
'-s', '--symbols', nargs='?', help = "names, joined by $, separately passed to main module in __symbols__ variable")
'-sf', '--sform', help = "enable support for string formatting mini language", action = 'store_true')
'-t', '--tconv', help = "enable automatic conversion to truth value by default. Disadvised, since it will result in a conversion for each boolean. Preferably use __pragma__ ('tconv') and __pragma__ (\'notconv\') to enable automatic conversion locally", action = 'store_true')
'-u', '--unit', nargs='?', help = "compile to units rather than to monolithic application. Use -u .auto to autogenerate dynamically loadable native JavaScript modules, one per Python module. Use -u .run to generate the loader and the staticcally loadable runtime unit. Use -u .com to generate a statically loadable component unit.")
'-v', '--verbose', help = "show all messages", action = 'store_true')
'-x', '--x', help = "reserved for extended options")
'-xr', '--xreex', help = "re-export all imported names", action = 'store_true')
'-xg', '--xglobs', help = "allow use of the 'globals' function", action = 'store_true')
'-xp', '--xpath', nargs = '?', help = "additional module search paths, joined by $, #'s will be replaced by spaces")
'-xt', '--xtiny', help = "generate tiny version of runtime, a.o. lacking support for implicit and explicit operator overloading. Use only if generated code can be validated, since it will introduce semantic alterations in edge cases", action = 'store_true')
'-*', '--star', help = "Like it? Grow it! Go to GitHub and then click [* Star]", action = 'store_true')
